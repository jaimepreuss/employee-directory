{"version":3,"sources":["components/SearchContainer.js","components/EmployeeContainer.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["SearchContainer","props","className","htmlFor","value","search","onChange","handleInputChange","placeholder","id","type","onClick","handleFormSubmit","EmployeeContainer","results","map","result","key","src","picture","thumbnail","alt","name","first","last","cell","email","dob","age","axios","get","App","state","employeeData","employeeResults","event","preventDefault","filtered","Number","isInteger","parseInt","filter","employee","data","includes","setState","target","API","then","res","sort","a","b","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2RAsBeA,MApBf,SAAyBC,GACrB,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,cACX,2BAAOC,QAAQ,mBAAf,mBACA,2BACAC,MAAOH,EAAMI,OACbC,SAAUL,EAAMM,kBAChBL,UAAU,eACVM,YAAY,gBACZC,GAAG,oBAEH,4BAAQC,KAAK,SAASC,QAASV,EAAMW,iBAAkBV,UAAU,mBAAjE,aCkBDW,MA7Bf,SAA2BZ,GACvB,OACI,+BACI,+BACA,4BACI,uCACA,oCACA,oCACA,qCACA,qCAGJ,+BACCA,EAAMa,QAAQC,KAAI,SAACC,GAChB,OACA,wBAAIC,IAAKD,EAAOP,GAAGL,OACnB,4BAAI,yBAAKc,IAAKF,EAAOG,QAAQC,UAAWC,IAAKL,EAAOM,KAAKC,SACzD,4BAAKP,EAAOM,KAAKC,MAAjB,IAAyBP,EAAOM,KAAKE,MACrC,4BAAKR,EAAOS,MACZ,4BAAKT,EAAOU,OACZ,4BAAKV,EAAOW,IAAIC,Y,iBCrBjB,EACQ,WACf,OAAOC,IAAMC,IAAI,kDC+DVC,E,4MA3DbC,MAAQ,CACN3B,OAAQ,GACR4B,aAAc,GACdC,gBAAiB,I,EAqBnBtB,iBAAmB,SAAAuB,GACjBA,EAAMC,iBACN,IAAIC,EAAW,KACX,EAAKL,MAAM3B,QAEXgC,EADCC,OAAOC,UAAUC,SAAS,EAAKR,MAAM3B,SAC3B,EAAK2B,MAAMC,aAAaQ,QAAO,SAAAC,GAAQ,OAAIA,EAASf,IAAIC,MAAQY,SAAS,EAAKR,MAAM3B,WAGpF,EAAK2B,MAAMC,aAAaQ,QAAO,SAACE,GAAD,OAAWA,EAAKrB,KAAKC,MAAMqB,SAAS,EAAKZ,MAAM3B,SAAWsC,EAAKrB,KAAKE,KAAKoB,SAAS,EAAKZ,MAAM3B,WAEzI,EAAKwC,SAAS,CAACZ,aAAcI,KAE7B,EAAKQ,SAAS,CAACZ,aAAc,EAAKD,MAAME,mB,EAI5C3B,kBAAoB,SAAA4B,GAClBA,EAAMC,iBACN,EAAKS,SAAS,CAAExC,OAAQ8B,EAAMW,OAAO1C,S,kEApClB,IAAD,OAClB2C,IACGC,MAAK,SAAAC,GACJ,IAAMN,EAAOM,EAAIN,KAAK7B,QAAQoC,MAAK,SAACC,EAAGC,GACrC,OAAID,EAAE7B,KAAKE,KAAO4B,EAAE9B,KAAKE,KAChB,EAEL2B,EAAE7B,KAAKE,KAAO4B,EAAE9B,KAAKE,MACf,EAEH,KAET,EAAKqB,SAAS,CAAEX,gBAAiBS,IACjC,EAAKE,SAAS,CAAEZ,aAAcU,OAE/BU,OAAM,SAAAC,GAASC,QAAQC,IAAIF,Q,+BA0B9B,OACE,6BACE,kBAAC,EAAD,CACE1C,iBAAkB6C,KAAK7C,iBACvBL,kBAAmBkD,KAAKlD,oBAE1B,kBAAC,EAAD,CAAmBO,QAAS2C,KAAKzB,MAAMC,oB,GAvD7ByB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.f25469ec.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction SearchContainer(props){\n    return (\n        <div className=\"search\">\n            <div className=\"form-group\">\n                <label htmlFor=\"employee-search\">Employee Search</label>\n                <input\n                value={props.search}\n                onChange={props.handleInputChange}\n                className=\"form-control\"\n                placeholder=\"Search by Age\"\n                id=\"employee-search\"\n                />\n                <button type=\"submit\" onClick={props.handleFormSubmit} className=\"btn btn-success\">\n                    Search\n                </button>\n            </div>\n        </div>\n    )\n};\n\nexport default SearchContainer;","import React from \"react\";\n\n// l2map\nfunction EmployeeContainer(props) {\n    return (\n        <table>\n            <thead>\n            <tr>\n                <th>Picture</th>\n                <th>Name</th>\n                <th>Cell</th>\n                <th>Email</th>\n                <th>Age</th>\n            </tr>\n            </thead>\n            <tbody>            \n            {props.results.map((result) => {\n                return (\n                <tr key={result.id.value}  >\n                <td><img src={result.picture.thumbnail} alt={result.name.first}/></td>\n                <td>{result.name.first} {result.name.last}</td>\n                <td>{result.cell}</td>\n                <td>{result.email}</td>\n                <td>{result.dob.age}</td>\n                </tr>\n                )\n            })}\n            </tbody>\n        </table>\n    )\n};\n\nexport default EmployeeContainer;","import axios from \"axios\";\n\nexport default {\n    getRandomEmployee: function(){\n        return axios.get(\"https://randomuser.me/api/?results=100&nat=us\");\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport SearchContainer from \"./components/SearchContainer\";\nimport EmployeeContainer from \"./components/EmployeeContainer\";\nimport API from \"./utils/API\";\n\nclass App extends Component {\n\n  state = {\n    search: \"\",\n    employeeData: [],\n    employeeResults: []\n  }\n  //l2sort\n  componentDidMount() {\n    API.getRandomEmployee()\n      .then(res => {\n        const data = res.data.results.sort((a, b) => {\n          if (a.name.last > b.name.last) {\n            return 1;\n          }\n          if (a.name.last < b.name.last) {\n            return -1;\n          }\n          return 0;\n        })\n        this.setState({ employeeResults: data });\n        this.setState({ employeeData: data });\n      })\n      .catch(err => { console.log(err) });\n  }\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    let filtered = null;\n    if (this.state.search) {\n      if(Number.isInteger(parseInt(this.state.search))) {\n        filtered = this.state.employeeData.filter(employee => employee.dob.age === parseInt(this.state.search));\n      }\n      else {\n        filtered = this.state.employeeData.filter((data) => (data.name.first.includes(this.state.search) || data.name.last.includes(this.state.search)));\n      }\n      this.setState({employeeData: filtered});\n    } else {\n      this.setState({employeeData: this.state.employeeResults})\n    }\n  }\n\n  handleInputChange = event => {\n    event.preventDefault();\n    this.setState({ search: event.target.value });\n  }\n\n  //How should I pass results into employee container\n  render() {\n    return (\n      <div>\n        <SearchContainer\n          handleFormSubmit={this.handleFormSubmit}\n          handleInputChange={this.handleInputChange}\n        />\n        <EmployeeContainer results={this.state.employeeData} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}